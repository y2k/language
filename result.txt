[3J[H[2J[3J[H[2JFile "test/dune", line 2, characters 7-11:
2 |  (name test)
           ^^^^
Testing `Tests'.
This run has ID `2VN2X6HP'.

  [OK]          Eval           0   File "test/test_common.ml", line 3, characters 6-13.
  [OK]          Eval           1   File "test/eval_test.ml", line 24, characters 7-14.
  [OK]          Eval           2   File "test/eval_test.ml", line 25, characters 7-14.
  [OK]          Eval           3   File "test/eval_test.ml", line 26, characters 7-14.
  [OK]          Eval           4   File "test/eval_test.ml", line 27, characters 8-15.
  [OK]          Eval           5   File "test/eval_test.ml", line 30, characters 7-14.
  [OK]          Eval           6   File "test/eval_test.ml", line 31, characters 7-14.
  [OK]          Eval           7   File "test/eval_test.ml", line 32, characters 7-14.
  [OK]          Eval           8   File "test/eval_test.ml", line 33, characters 8-15.
> [FAIL]        Java           0   File "test/test_common.ml", line 3, characters 6-13.
  [OK]          Java           1   File "test/java_test.ml", line 62, characters 8-15.
  [OK]          Java           2   File "test/java_test.ml", line 74, characters 7-14.
  [OK]          Java           3   File "test/java_test.ml", line 76, characters 7-14.
  [OK]          Java           4   File "test/java_test.ml", line 78, characters 8-15.
  [OK]          Java           5   File "test/java_test.ml", line 81, characters 7-14.
  [OK]          Java           6   File "test/java_test.ml", line 83, characters 8-15.
  [OK]          Java           7   File "test/java_test.ml", line 86, characters 7-14.
  [OK]          Java           8   File "test/java_test.ml", line 87, characters 7-14.
  [OK]          Java           9   File "test/java_test.ml", line 88, characters 8-15.
  [OK]          Java          10   File "test/java_test.ml", line 91, characters 8-15.
  [OK]          Java          11   File "test/java_test.ml", line 94, characters 7-14.
  [OK]          Java          12   File "test/java_test.ml", line 95, characters 7-14.
  [OK]          Java          13   File "test/java_test.ml", line 97, characters 7-14.
  [OK]          Java          14   File "test/java_test.ml", line 98, characters 8-15.
  [OK]          Java          15   File "test/java_test.ml", line 101, characters 7-14.
  [OK]          Java          16   File "test/java_test.ml", line 102, characters 8-15.
  [OK]          Java          17   File "test/java_test.ml", line 105, characters 8-15.
  [OK]          Java          18   File "test/java_test.ml", line 108, characters 8-15.
  [OK]          Java          19   File "test/java_test.ml", line 116, characters 7-14.
  [OK]          Java          20   File "test/java_test.ml", line 118, characters 7-14.
  [OK]          Java          21   File "test/java_test.ml", line 119, characters 7-14.
  [OK]          Java          22   File "test/java_test.ml", line 121, characters 8-15.
  [OK]          Java          23   File "test/java_test.ml", line 124, characters 7-14.
  [OK]          Java          24   File "test/java_test.ml", line 126, characters 7-14.
  [OK]          Java          25   File "test/java_test.ml", line 127, characters 8-15.
  [OK]          Java          26   File "test/java_test.ml", line 130, characters 7-14.
  [OK]          Java          27   File "test/java_test.ml", line 131, characters 7-14.
  [OK]          Java          28   File "test/java_test.ml", line 132, characters 7-14.
  [OK]          Java          29   File "test/java_test.ml", line 133, characters 7-14.
  [OK]          Java          30   File "test/java_test.ml", line 134, characters 8-15.
  [OK]          Java          31   File "test/java_test.ml", line 138, characters 8-15.
  [OK]          Java          32   File "test/java_test.ml", line 152, characters 7-14.
  [OK]          Java          33   File "test/java_test.ml", line 153, characters 7-14.
  [OK]          Java          34   File "test/java_test.ml", line 155, characters 7-14.
  [OK]          Java          35   File "test/java_test.ml", line 156, characters 7-14.
  [OK]          Java          36   File "test/java_test.ml", line 157, characters 7-14.
  [OK]          Java          37   File "test/java_test.ml", line 158, characters 7-14.
  [OK]          Java          38   File "test/java_test.ml", line 159, characters 7-14.
  [OK]          Java          39   File "test/java_test.ml", line 160, characters 7-14.
  [OK]          Java          40   File "test/java_test.ml", line 161, characters 7-14.
  [OK]          Java          41   File "test/java_test.ml", line 162, characters 7-14.
  [OK]          Java          42   File "test/java_test.ml", line 163, characters 7-14.
  [OK]          JS             0   File "test/test_common.ml", line 3, characters 6-13.
  [OK]          JS             1   File "test/js_test.ml", line 24, characters 8-15.
  [OK]          JS             2   File "test/js_test.ml", line 27, characters 8-15.
  [OK]          JS             3   File "test/js_test.ml", line 30, characters 7-14.
  [OK]          JS             4   File "test/js_test.ml", line 31, characters 8-15.
  [OK]          JS             5   File "test/js_test.ml", line 34, characters 7-14.
  [OK]          JS             6   File "test/js_test.ml", line 35, characters 7-14.
  [OK]          JS             7   File "test/js_test.ml", line 36, characters 8-15.
  [OK]          JS             8   File "test/js_test.ml", line 40, characters 7-14.
  [OK]          JS             9   File "test/js_test.ml", line 41, characters 8-15.
  [OK]          JS            10   File "test/js_test.ml", line 44, characters 8-15.
  [OK]          JS            11   File "test/js_test.ml", line 47, characters 8-15.
  [OK]          JS            12   File "test/js_test.ml", line 50, characters 8-15.
  [OK]          JS            13   File "test/js_test.ml", line 53, characters 8-15.
  [OK]          JS            14   File "test/js_test.ml", line 56, characters 8-15.
  [OK]          JS            15   File "test/js_test.ml", line 59, characters 7-14.
  [OK]          JS            16   File "test/js_test.ml", line 60, characters 7-14.
  [OK]          JS            17   File "test/js_test.ml", line 61, characters 7-14.
  [OK]          JS            18   File "test/js_test.ml", line 62, characters 7-14.
  [OK]          JS            19   File "test/js_test.ml", line 63, characters 8-15.
  [OK]          JS            20   File "test/js_test.ml", line 66, characters 8-15.
  [OK]          JS            21   File "test/js_test.ml", line 69, characters 7-14.
  [OK]          JS            22   File "test/js_test.ml", line 70, characters 7-14.
  [OK]          JS            23   File "test/js_test.ml", line 71, characters 8-15.
  [OK]          JS            24   File "test/js_test.ml", line 74, characters 8-15.
  [OK]          JS            25   File "test/js_test.ml", line 77, characters 8-15.
  [OK]          JS            26   File "test/js_test.ml", line 80, characters 8-15.
  [OK]          JS            27   File "test/js_test.ml", line 83, characters 8-15.
  [OK]          JS            28   File "test/js_test.ml", line 86, characters 7-14.
  [OK]          JS            29   File "test/js_test.ml", line 87, characters 7-14.
  [OK]          JS            30   File "test/js_test.ml", line 88, characters 8-15.
  [OK]          JS            31   File "test/js_test.ml", line 91, characters 7-14.
  [OK]          JS            32   File "test/js_test.ml", line 92, characters 8-15.
  [OK]          JS            33   File "test/js_test.ml", line 95, characters 7-14.
  [OK]          JS            34   File "test/js_test.ml", line 96, characters 7-14.
  [OK]          JS            35   File "test/js_test.ml", line 97, characters 7-14.
  [OK]          JS            36   File "test/js_test.ml", line 98, characters 8-15.
  [OK]          JS            37   File "test/js_test.ml", line 101, characters 7-14.
  [OK]          Files          0   File "test/file_test.ml", line 11, characters 14-21.
  [OK]          Files          1   File "test/file_test.ml", line 12, characters 14-21.
  [OK]          Files          2   File "test/file_test.ml", line 13, characters 14-21.
  [OK]          Files          3   File "test/file_test.ml", line 14, characters 14-21.
  [OK]          Files          4   File "test/file_test.ml", line 15, characters 14-21.

┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [FAIL]        Java           0   File "test/test_common.ml", line 3, characters 6-13.                                                                                          │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
*   [MACRO] Parse                -> [(do* (def* macro_declare (fn* (x) (list 'do))) (def* macro_boolean (fn* (x) (list 'y2k.RT.toBoolean x))) (def* macro_unixtime (fn* () (list '/ (list '.getTime (list 'java.util.Date.)) 1000.0))) (def* list (fn* (& xs) xs)) (def* macro_conj (fn* (xs x) (list 'y2k.RT.conj xs x))) (def* macro_map (fn* (f xs) (list 'y2k.RT.map f xs))) (def* macro_eprintln (fn* (& xs) (concat (list 'y2k.RT.eprintln) xs))) (def* macro_FIXME (fn* (& xs) (list 'java.util.Objects.requireNonNull nil (concat (list 'str) xs)))) (def* macro_not= (fn* (x y) (list 'not (list '= x y)))) (def* macro_rest (fn* (xs) (do* (let* xs_var (gensym)) (list 'do (list 'let* xs_var (list 'cast 'java.util.List xs)) (list '.subList xs_var 1 (list '.size xs_var)))))) (def* macro_concat (fn* (& xs) (concat (list 'y2k.RT.concat) xs))) (def* macro_merge (fn* (m1 m2) (list 'y2k.RT.merge m1 m2))) (def* macro_drop (fn* (n xs) (list 'y2k.RT.drop n xs))) (def* macro_first (fn* (xs) (list 'get xs 0))) (def* macro_empty? (fn* (xs) (list '= 0 (list 'count xs)))) (def* macro_some? (fn* (x) (list 'not (list 'nil? x)))) (def* macro_nil? (fn* (x) (list '= 'nil x))) (def* macro_into-array2 (fn* (class col) (list 'y2k.RT.into_array class col))) (def* macro_assoc (fn* (xs k v) (list 'y2k.RT.assoc xs k v))) (def* macro_atom (fn* (x) (list 'java.util.concurrent.atomic.AtomicReference. x))) (def* macro_reset! (fn* (a x) (do* (let* var (gensym)) (list 'let (list 'vector var x) (list '.set (list 'cast 'java.util.concurrent.atomic.AtomicReference a) var) var)))) (def* macro_swap! (fn* (a f) (list '.getAndUpdate (list 'cast 'java.util.concurrent.atomic.AtomicReference a) (list 'cast 'java.util.function.UnaryOperator f)))) (def* macro_deref (fn* (a) (list '.get (list 'cast 'java.util.concurrent.atomic.AtomicReference a)))) (def* macro_comment (fn* (x) (list 'do))) (def* macro_defn- (fn* (name args & body) (concat (list 'defn name args) body))) (def* macro_= (fn* (x y) (list 'java.util.Objects.equals x y))) (def* macro_hash-map (fn* (& xs) (concat (list 'y2k.RT.hash_map) xs))) (def* macro_count (fn* (xs) (do* (let* vxs (gensym)) (list 'do (list 'let vxs xs) (list 'if (list 'instance? 'java.util.Map vxs) (list '. (list 'cast 'java.util.Map vxs) 'size) (list '. (list 'cast 'java.util.Collection vxs) 'size)))))) (def* macro_get (fn* (xs k) (list 'y2k.RT.get xs k))) (def* macro_str (fn* (& xs) (concat (list 'String.format (reduce (fn* (acc x) (str acc "%s")) "" xs)) xs))) (def* macro_string? (fn* (x) (list 'instance? 'String x))) (def* macro_boolean? (fn* (x) (list 'instance? 'Boolean (list 'cast 'Object x)))) (def* macro_println (fn* (& xs) (list 'do (list 'System.out.println (concat (list 'str) xs)) (list 'y2k.RT.nop)))) (def* macro_eprintln (fn* (& xs) (list 'do (list 'System.err.println (concat (list 'str) xs)) (list 'y2k.RT.nop)))) (def* macro_vec (fn* (x) x)) (def* macro_list (fn* (& xs) (concat (list 'java.util.Arrays.asList) xs))) (def* macro_vector (fn* (& xs) (concat (list 'java.util.Arrays.asList) xs))) (def* macro_reduce (fn* (f init xs) (list 'y2k.RT.reduce f init xs))) (def* macro_second (fn* (xs) (list 'get xs 1))) (def* macro_vector? (fn* (xs) (list 'instance? 'java.util.List xs))) (def* macro_contains? (fn* (m k) (list 'y2k.RT.contains m k))) (def* macro_shuffle (fn* (seed xs) (list 'y2k.RT.shuffle seed xs))) (def* macro_take (fn* (n xs) (list 'y2k.RT.take n xs))))]

*   [MACRO] Simplify             -> [(do* (def* macro_declare (fn* (x) (list 'do))) (def* macro_boolean (fn* (x) (list 'y2k.RT.toBoolean x))) (def* macro_unixtime (fn* () (list '/ (list '.getTime (list 'java.util.Date.)) 1000.0))) (def* list (fn* (& xs) xs)) (def* macro_conj (fn* (xs x) (list 'y2k.RT.conj xs x))) (def* macro_map (fn* (f xs) (list 'y2k.RT.map f xs))) (def* macro_eprintln (fn* (& xs) (concat (list 'y2k.RT.eprintln) xs))) (def* macro_FIXME (fn* (& xs) (list 'java.util.Objects.requireNonNull nil (concat (list 'str) xs)))) (def* macro_not= (fn* (x y) (list 'not (list '= x y)))) (def* macro_rest (fn* (xs) (do* (let* xs_var (gensym)) (list 'do (list 'let* xs_var (list 'cast 'java.util.List xs)) (list '.subList xs_var 1 (list '.size xs_var)))))) (def* macro_concat (fn* (& xs) (concat (list 'y2k.RT.concat) xs))) (def* macro_merge (fn* (m1 m2) (list 'y2k.RT.merge m1 m2))) (def* macro_drop (fn* (n xs) (list 'y2k.RT.drop n xs))) (def* macro_first (fn* (xs) (list 'get xs 0))) (def* macro_empty? (fn* (xs) (list '= 0 (list 'count xs)))) (def* macro_some? (fn* (x) (list 'not (list 'nil? x)))) (def* macro_nil? (fn* (x) (list '= 'nil x))) (def* macro_into-array2 (fn* (class col) (list 'y2k.RT.into_array class col))) (def* macro_assoc (fn* (xs k v) (list 'y2k.RT.assoc xs k v))) (def* macro_atom (fn* (x) (list 'java.util.concurrent.atomic.AtomicReference. x))) (def* macro_reset! (fn* (a x) (do* (let* var (gensym)) (list 'let (list 'vector var x) (list '.set (list 'cast 'java.util.concurrent.atomic.AtomicReference a) var) var)))) (def* macro_swap! (fn* (a f) (list '.getAndUpdate (list 'cast 'java.util.concurrent.atomic.AtomicReference a) (list 'cast 'java.util.function.UnaryOperator f)))) (def* macro_deref (fn* (a) (list '.get (list 'cast 'java.util.concurrent.atomic.AtomicReference a)))) (def* macro_comment (fn* (x) (list 'do))) (def* macro_defn- (fn* (name args & body) (concat (list 'defn name args) body))) (def* macro_= (fn* (x y) (list 'java.util.Objects.equals x y))) (def* macro_hash-map (fn* (& xs) (concat (list 'y2k.RT.hash_map) xs))) (def* macro_count (fn* (xs) (do* (let* vxs (gensym)) (list 'do (list 'let vxs xs) (list 'if (list 'instance? 'java.util.Map vxs) (list '. (list 'cast 'java.util.Map vxs) 'size) (list '. (list 'cast 'java.util.Collection vxs) 'size)))))) (def* macro_get (fn* (xs k) (list 'y2k.RT.get xs k))) (def* macro_str (fn* (& xs) (concat (list 'String.format (reduce (fn* (acc x) (str acc "%s")) "" xs)) xs))) (def* macro_string? (fn* (x) (list 'instance? 'String x))) (def* macro_boolean? (fn* (x) (list 'instance? 'Boolean (list 'cast 'Object x)))) (def* macro_println (fn* (& xs) (list 'do (list 'System.out.println (concat (list 'str) xs)) (list 'y2k.RT.nop)))) (def* macro_eprintln (fn* (& xs) (list 'do (list 'System.err.println (concat (list 'str) xs)) (list 'y2k.RT.nop)))) (def* macro_vec (fn* (x) x)) (def* macro_list (fn* (& xs) (concat (list 'java.util.Arrays.asList) xs))) (def* macro_vector (fn* (& xs) (concat (list 'java.util.Arrays.asList) xs))) (def* macro_reduce (fn* (f init xs) (list 'y2k.RT.reduce f init xs))) (def* macro_second (fn* (xs) (list 'get xs 1))) (def* macro_vector? (fn* (xs) (list 'instance? 'java.util.List xs))) (def* macro_contains? (fn* (m k) (list 'y2k.RT.contains m k))) (def* macro_shuffle (fn* (seed xs) (list 'y2k.RT.shuffle seed xs))) (def* macro_take (fn* (n xs) (list 'y2k.RT.take n xs))))]

* [SIMPLE] Parse                 -> [(defn test (vector) (if (contains? (hash-map :a 1 :b 2) :b) nil (FIXME)) (if (not (contains? (hash-map :a 1 :b 2) :c)) nil (FIXME)) (if (vector? (vector 1 2)) nil (FIXME)) (if (= 2 (second (vector 1 2))) nil (FIXME)) (if (string? "") nil (FIXME)) (if (boolean? false) nil (FIXME)) (if (= 6 (reduce (fn (vector ^int a ^int b) (+ a b)) 0 (vector 1 2 3))) nil (FIXME)) (if (= (str (vector 1 2)) (str (vec (list 1 2)))) nil (FIXME)) (println "1" "2") (eprintln "1" "2") (let t1 (println "1" "2")) (let t2 (eprintln "1" "2")) (if (= 2 (count (rest (vector 1 2 3)))) nil (FIXME)) 0)]

* [SIMPLE] Simplify              -> [(def* test (fn* () (do* (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (instance? String "")) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (^int a ^int b) (+ a b)) 0 (java.util.Arrays.asList 1 2 3)))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) nil (java.util.Objects.requireNonNull nil (String.format ""))) (do* (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop)) (do* (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop)) (let* t1 (do* (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop))) (let* t2 (do* (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (do* (let* p__1 (do* (let* p__2 (cast java.util.List (vector 1 2 3))) (. p__2 subList 1 (. p__2 size)))) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (. (cast java.util.Map p__1) size) (. (cast java.util.Collection p__1) size))))) nil (java.util.Objects.requireNonNull nil (String.format ""))) 0)))]

* if_to_statement                -> [(def* test (fn* () (do* (let* p__3) (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) (set! p__3 nil) (set! p__3 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__4) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) (set! p__4 nil) (set! p__4 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__5) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) (set! p__5 nil) (set! p__5 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__6) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) (set! p__6 nil) (set! p__6 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__7) (if* (y2k.RT.toBoolean (instance? String "")) (set! p__7 nil) (set! p__7 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__8) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) (set! p__8 nil) (set! p__8 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__9) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (^int a ^int b) (+ a b)) 0 (java.util.Arrays.asList 1 2 3)))) (set! p__9 nil) (set! p__9 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__10) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) (set! p__10 nil) (set! p__10 (java.util.Objects.requireNonNull nil (String.format "")))) (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.out.println (String.format "%s%s" "1" "2")) (let* t1 (y2k.RT.nop)) (System.err.println (String.format "%s%s" "1" "2")) (let* t2 (y2k.RT.nop)) (let* p__12) (let* p__2 (cast java.util.List (vector 1 2 3))) (let* p__1 (. p__2 subList 1 (. p__2 size))) (let* p__11) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (set! p__11 (. (cast java.util.Map p__1) size)) (set! p__11 (. (cast java.util.Collection p__1) size))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 p__11)) (set! p__12 nil) (set! p__12 (java.util.Objects.requireNonNull nil (String.format "")))) 0)))]

* Stage_resolve_import           -> [(def* test (fn* () (do* (let* p__3) (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) (set! p__3 nil) (set! p__3 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__4) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) (set! p__4 nil) (set! p__4 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__5) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) (set! p__5 nil) (set! p__5 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__6) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) (set! p__6 nil) (set! p__6 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__7) (if* (y2k.RT.toBoolean (instance? String.class "")) (set! p__7 nil) (set! p__7 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__8) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) (set! p__8 nil) (set! p__8 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__9) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (^int a ^int b) (+ a b)) 0 (java.util.Arrays.asList 1 2 3)))) (set! p__9 nil) (set! p__9 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__10) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) (set! p__10 nil) (set! p__10 (java.util.Objects.requireNonNull nil (String.format "")))) (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.out.println (String.format "%s%s" "1" "2")) (let* t1 (y2k.RT.nop)) (System.err.println (String.format "%s%s" "1" "2")) (let* t2 (y2k.RT.nop)) (let* p__12) (let* p__2 (cast java.util.List (vector 1 2 3))) (let* p__1 (. p__2 subList 1 (. p__2 size))) (let* p__11) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (set! p__11 (. (cast java.util.Map p__1) size)) (set! p__11 (. (cast java.util.Collection p__1) size))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 p__11)) (set! p__12 nil) (set! p__12 (java.util.Objects.requireNonNull nil (String.format "")))) 0)))]

* Stage_alias_to_class           -> [(def* test (fn* () (do* (let* p__3) (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) (set! p__3 nil) (set! p__3 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__4) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) (set! p__4 nil) (set! p__4 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__5) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) (set! p__5 nil) (set! p__5 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__6) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) (set! p__6 nil) (set! p__6 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__7) (if* (y2k.RT.toBoolean (instance? String.class "")) (set! p__7 nil) (set! p__7 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__8) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) (set! p__8 nil) (set! p__8 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__9) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (^int a ^int b) (+ a b)) 0 (java.util.Arrays.asList 1 2 3)))) (set! p__9 nil) (set! p__9 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__10) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) (set! p__10 nil) (set! p__10 (java.util.Objects.requireNonNull nil (String.format "")))) (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.out.println (String.format "%s%s" "1" "2")) (let* t1 (y2k.RT.nop)) (System.err.println (String.format "%s%s" "1" "2")) (let* t2 (y2k.RT.nop)) (let* p__12) (let* p__2 (cast java.util.List (vector 1 2 3))) (let* p__1 (. p__2 subList 1 (. p__2 size))) (let* p__11) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (set! p__11 (. (cast java.util.Map p__1) size)) (set! p__11 (. (cast java.util.Collection p__1) size))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 p__11)) (set! p__12 nil) (set! p__12 (java.util.Objects.requireNonNull nil (String.format "")))) 0)))]

* Stage_fun_args_type            -> [(def* test (fn* () (do* (let* p__3) (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) (set! p__3 nil) (set! p__3 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__4) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) (set! p__4 nil) (set! p__4 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__5) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) (set! p__5 nil) (set! p__5 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__6) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) (set! p__6 nil) (set! p__6 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__7) (if* (y2k.RT.toBoolean (instance? String.class "")) (set! p__7 nil) (set! p__7 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__8) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) (set! p__8 nil) (set! p__8 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__9) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (p__13 p__14) (do* (let* ^int b (cast int p__14)) (do* (let* ^int a (cast int p__13)) (+ a b)))) 0 (java.util.Arrays.asList 1 2 3)))) (set! p__9 nil) (set! p__9 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__10) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) (set! p__10 nil) (set! p__10 (java.util.Objects.requireNonNull nil (String.format "")))) (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.out.println (String.format "%s%s" "1" "2")) (let* t1 (y2k.RT.nop)) (System.err.println (String.format "%s%s" "1" "2")) (let* t2 (y2k.RT.nop)) (let* p__12) (let* p__2 (cast java.util.List (vector 1 2 3))) (let* p__1 (. p__2 subList 1 (. p__2 size))) (let* p__11) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (set! p__11 (. (cast java.util.Map p__1) size)) (set! p__11 (. (cast java.util.Collection p__1) size))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 p__11)) (set! p__12 nil) (set! p__12 (java.util.Objects.requireNonNull nil (String.format "")))) 0)))]

* Stage_flat_do                  -> [(def* test (fn* () (do* (let* p__3) (if* (y2k.RT.toBoolean (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :b)) (set! p__3 nil) (set! p__3 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__4) (if* (y2k.RT.toBoolean (not (y2k.RT.contains (y2k.RT.hash_map :a 1 :b 2) :c))) (set! p__4 nil) (set! p__4 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__5) (if* (y2k.RT.toBoolean (instance? java.util.List (java.util.Arrays.asList 1 2))) (set! p__5 nil) (set! p__5 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__6) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 (y2k.RT.get (java.util.Arrays.asList 1 2) 1))) (set! p__6 nil) (set! p__6 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__7) (if* (y2k.RT.toBoolean (instance? String.class "")) (set! p__7 nil) (set! p__7 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__8) (if* (y2k.RT.toBoolean (instance? Boolean (cast Object false))) (set! p__8 nil) (set! p__8 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__9) (if* (y2k.RT.toBoolean (java.util.Objects.equals 6 (y2k.RT.reduce (fn* (p__13 p__14) (do* (let* ^int b (cast int p__14)) (let* ^int a (cast int p__13)) (+ a b))) 0 (java.util.Arrays.asList 1 2 3)))) (set! p__9 nil) (set! p__9 (java.util.Objects.requireNonNull nil (String.format "")))) (let* p__10) (if* (y2k.RT.toBoolean (java.util.Objects.equals (String.format "%s" (java.util.Arrays.asList 1 2)) (String.format "%s" (java.util.Arrays.asList 1 2)))) (set! p__10 nil) (set! p__10 (java.util.Objects.requireNonNull nil (String.format "")))) (System.out.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.err.println (String.format "%s%s" "1" "2")) (y2k.RT.nop) (System.out.println (String.format "%s%s" "1" "2")) (let* t1 (y2k.RT.nop)) (System.err.println (String.format "%s%s" "1" "2")) (let* t2 (y2k.RT.nop)) (let* p__12) (let* p__2 (cast java.util.List (vector 1 2 3))) (let* p__1 (. p__2 subList 1 (. p__2 size))) (let* p__11) (if* (y2k.RT.toBoolean (instance? java.util.Map p__1)) (set! p__11 (. (cast java.util.Map p__1) size)) (set! p__11 (. (cast java.util.Collection p__1) size))) (if* (y2k.RT.toBoolean (java.util.Objects.equals 2 p__11)) (set! p__12 nil) (set! p__12 (java.util.Objects.requireNonNull nil (String.format "")))) 0)))]

package y2k;

import java.util.*;

public class App {

public class eff {
public static /* final */ Object foo;
static {
foo=y2k.RT.fn((x)->{

return x;
});
};
}

public class user {
public static /* final */ Object test;
static {
test=y2k.RT.fn(()->{
Object p__3;
if (y2k.RT.toBoolean(y2k.RT.contains(y2k.RT.hash_map("a",1,"b",2),"b"))) {
p__3=null;
} else {
p__3=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__4;
if (y2k.RT.toBoolean((!(y2k.RT.contains(y2k.RT.hash_map("a",1,"b",2),"c"))))) {
p__4=null;
} else {
p__4=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__5;
if (y2k.RT.toBoolean((java.util.Arrays.asList(1,2) instanceof java.util.List))) {
p__5=null;
} else {
p__5=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__6;
if (y2k.RT.toBoolean(java.util.Objects.equals(2,y2k.RT.get(java.util.Arrays.asList(1,2),1)))) {
p__6=null;
} else {
p__6=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__7;
if (y2k.RT.toBoolean(("" instanceof String))) {
p__7=null;
} else {
p__7=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__8;
if (y2k.RT.toBoolean((((Object)false) instanceof Boolean))) {
p__8=null;
} else {
p__8=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__9;
if (y2k.RT.toBoolean(java.util.Objects.equals(6,y2k.RT.reduce(y2k.RT.fn((p__13,p__14)->{
int b=((int)p__14);
int a=((int)p__13);
return (a + b);
}),0,java.util.Arrays.asList(1,2,3))))) {
p__9=null;
} else {
p__9=java.util.Objects.requireNonNull(null,String.format(""));
};
Object p__10;
if (y2k.RT.toBoolean(java.util.Objects.equals(String.format("%s",java.util.Arrays.asList(1,2)),String.format("%s",java.util.Arrays.asList(1,2))))) {
p__10=null;
} else {
p__10=java.util.Objects.requireNonNull(null,String.format(""));
};
System.out.println(String.format("%s%s","1","2"));
y2k.RT.nop();
System.err.println(String.format("%s%s","1","2"));
y2k.RT.nop();
System.out.println(String.format("%s%s","1","2"));
var t1=y2k.RT.nop();
System.err.println(String.format("%s%s","1","2"));
var t2=y2k.RT.nop();
Object p__12;
var p__2=((java.util.List)y2k.RT.invoke(vector,1,2,3));
var p__1=p__2.subList(1,p__2.size());
Object p__11;
if (y2k.RT.toBoolean((p__1 instanceof java.util.Map))) {
p__11=((java.util.Map)p__1).size();
} else {
p__11=((java.util.Collection)p__1).size();
};
if (y2k.RT.toBoolean(java.util.Objects.equals(2,p__11))) {
p__12=null;
} else {
p__12=java.util.Objects.requireNonNull(null,String.format(""));
};
return 0;
});
};
};

public static void main(String[] args) {System.exit((int) RT.invoke(user.test));}}


class RT {

    public static Object nop() {
        return null;
    }

    public static boolean toBoolean(Object x) {
        if (x instanceof Boolean) {
            return (Boolean) x;
        }
        return x != null;
    }

    public static Object eprintln(Object... xs) {
        for (Object x : xs) {
            System.err.print(x);
            System.err.print(" ");
        }
        System.err.println();
        return null;
    }

    // Exceptions

    private static <T extends Throwable> void throwException(Throwable exception, Object dummy) throws T {
        throw (T) exception;
    }

    public static <T> T throwSilent(Object exception) {
        throwException((Throwable) exception, null);
        return null;
    }

    // Collections

    public static Object hash_map(Object... xs) {
        var result = new HashMap<Object, Object>();
        for (int i = 0; i < xs.length; i += 2) {
            result.put(xs[i], xs[i + 1]);
        }
        return result;
    }

    public static Object reduce(Object f, Object init, Object xs) {
        var func = (Fn2) f;
        var col = (Collection<Object>) xs;
        var result = init;
        for (Object x : col) {
            try {
                result = func.invoke(result, x);
            } catch (Exception e) {
                throwException(e, null);
            }
        }
        return result;
    }

    public static Boolean contains(Object xs, Object x) {
        var col = (Map<?, ?>) xs;
        return col.containsKey(x);
    }

    public static List<Object> take(Object n, Object xs) {
        var col = (List<Object>) xs;
        return col.subList(0, (Integer) n);
    }

    public static List<Object> shuffle(Object seed, Object xs) {
        var col = (Collection<Object>) xs;
        var result = new ArrayList<>(col);
        var seed2 = (long) (((double) seed) * Long.MAX_VALUE);
        Collections.shuffle(result, new Random(seed2));
        return result;
    }

    public static List<Object> conj(Object xs, Object x) {
        var col = (Collection<Object>) xs;
        var result = new ArrayList<>(col);
        result.add(x);
        return result;
    }

    public static <T> T get(Object source, Object key) {
        if (source instanceof java.util.Map) {
            return (T) ((java.util.Map<?, ?>) source).get(key);
        }
        if (source instanceof java.util.List) {
            return (T) ((java.util.List<?>) source).get((Integer) key);
        }
        throw new RuntimeException("Unsupported source: " + source + ", key: " + key);
    }

    public static List<Object> map(Object f, Object xs) {
        var func = (java.util.function.Function<Object, Object>) f;
        if (xs instanceof Map) {
            var map = (Map<Object, Object>) xs;
            var result = new ArrayList<Object>(map.size());
            for (Map.Entry<Object, Object> entry : map.entrySet()) {
                result.add(func.apply(List.of(entry.getKey(), entry.getValue())));
            }
            return result;
        }
        var col = (Collection<Object>) xs;
        var result = new ArrayList<Object>(col.size());
        for (Object x : col) {
            result.add(func.apply(x));
        }
        return result;
    }

    public static Object drop(Object n, Object xs) {
        var col = (List<Object>) xs;
        return col.subList((Integer) n, col.size());
    }

    public static java.util.Map<Object, Object> merge(Object as, Object bs) {
        var a = (java.util.Map<Object, Object>) as;
        var b = (java.util.Map<Object, Object>) bs;
        var result = new java.util.HashMap<>(a);
        result.putAll(b);
        return result;
    }

    public static Object concat(Object xs, Object ys) {
        var a = (java.util.List<Object>) xs;
        var b = (java.util.List<Object>) ys;
        var result = new java.util.ArrayList<>(a);
        result.addAll(b);
        return result;
    }

    public static Object[] into_array(Class<?> cls, Object xs) {
        var col = (java.util.List<Object>) xs;
        var result = (Object[]) java.lang.reflect.Array.newInstance(cls, col.size());
        return col.toArray(result);
    }

    public static Object assoc(Object xs, Object k, Object v) {
        var col = (java.util.Map<Object, Object>) xs;
        var result = new java.util.HashMap<>(col);
        result.put(k, v);
        return result;
    }

    // Lambda

    public interface Fn0 {
        public Object invoke() throws Exception;
    }

    public interface Fn1 extends java.util.function.UnaryOperator<Object> {
        public Object invoke(Object a) throws Exception;

        public default Object apply(Object a) {
            try {
                return invoke(a);
            } catch (Exception e) {
                return throwSilent(e);
            }
        }
    }

    public interface Fn2 {
        public Object invoke(Object a, Object b) throws Exception;
    }

    public interface Fn3 {
        public Object invoke(Object a, Object b, Object c) throws Exception;
    }

    public interface Fn4 {
        public Object invoke(Object a, Object b, Object c, Object d) throws Exception;
    }

    public static Object fn(Fn0 f) {
        return new Fn0() {

            @Override
            public Object invoke() throws Exception {
                return f.invoke();
            }

            @Override
            public String toString() {
                return "lambda0";
            }
        };
    }

    public static Object fn(Fn1 f) {
        return new Fn1() {

            @Override
            public Object invoke(Object a) throws Exception {
                return f.invoke(a);
            }

            @Override
            public String toString() {
                return "lambda1";
            }
        };
    }

    public static Object fn(Fn2 f) {
        return new Fn2() {

            @Override
            public Object invoke(Object a, Object b) throws Exception {
                return f.invoke(a, b);
            }

            @Override
            public String toString() {
                return "lambda2";
            }
        };
    }

    public static Object fn(Fn3 f) {
        return new Fn3() {

            @Override
            public Object invoke(Object a, Object b, Object c) throws Exception {
                return f.invoke(a, b, c);
            }

            @Override
            public String toString() {
                return "lambda3";
            }
        };
    }

    public static Object fn(Fn4 f) {
        return new Fn4() {

            @Override
            public Object invoke(Object a, Object b, Object c, Object d) throws Exception {
                return f.invoke(a, b, c, d);
            }

            @Override
            public String toString() {
                return "lambda4";
            }
        };
    }

    public static Object invoke(Object f) {
        try {
            return ((Fn0) f).invoke();
        } catch (Exception e) {
            return throwSilent(e);
        }
    }

    public static Object invoke(Object f, Object a) {
        try {
            return ((Fn1) f).invoke(a);
        } catch (Exception e) {
            return throwSilent(e);
        }
    }

    public static Object invoke(Object f, Object a, Object b) {
        try {
            return ((Fn2) f).invoke(a, b);
        } catch (Exception e) {
            return throwSilent(e);
        }
    }

    public static Object invoke(Object f, Object a, Object b, Object c) {
        try {
            return ((Fn3) f).invoke(a, b, c);
        } catch (Exception e) {
            return throwSilent(e);
        }
    }

    public static Object invoke(Object f, Object a, Object b, Object c, Object d) {
        try {
            return ((Fn4) f).invoke(a, b, c, d);
        } catch (Exception e) {
            return throwSilent(e);
        }
    }
}
/var/folders/yn/rfk_wf_941g9wdgstvd2g1_80000gn/T/build_01c5e8_dune/y2k2781cc.java:82: error: cannot find symbol
var p__2=((java.util.List)y2k.RT.invoke(vector,1,2,3));
                                        ^
  symbol:   variable vector
  location: class App.user
Note: /var/folders/yn/rfk_wf_941g9wdgstvd2g1_80000gn/T/build_01c5e8_dune/y2k2781cc.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error
error: compilation failed

   Expected: `"0"'
   Received: `"1"'

Raised at Alcotest_engine__Test.check in file "src/alcotest-engine/test.ml", lines 216-226, characters 4-19
Called from Alcotest_engine__Core.Make.protect_test.(fun) in file "src/alcotest-engine/core.ml", line 186, characters 17-23
Called from Alcotest_engine__Monad.Identity.catch in file "src/alcotest-engine/monad.ml", line 24, characters 31-35

Logs saved to `~/Projects/language/_build/default/test/_build/_tests/Tests/Java.000.output'.
 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Full test results in `~/Projects/language/_build/default/test/_build/_tests/Tests'.
1 failure! in 12.881s. 95 tests run.
make: *** [test] Error 1
