(+ 1 2)
(= 1 2)
(conj [1 2] 3)
(def a [1 2])
(def a {1 2})
(def a 1) a
(def a)
(defn f [_ x _] x)
(defn f [] (ui/a 1))
(defn foo [{a :b}] a)
(defn foo [a b] (+ a b))
(defn foo [a b] (+ a b)) (defn main [] (foo 1 2))
(defn foo [a b] (+ a b)) (defn main [x] (foo (foo 1 2) x))
(defn foo [a b] (+ a b)) (foo 1 2)
(defonce foo 3)
(do (str 1) (str 2))
(empty? [])
(eval! (:b {:a 1 :b 2}))
(eval! (+ 1 2))
(eval! (if false 1 0))
(eval! (if true 1 0))
(eval! (str "A-" (+ 2 2) "-B"))
(eval! (vec (concat [1 2] [3 4])))
(eval! {:a 1 :b 2})
(first [1 2])
(FIXME)
(gensym)
(if true 1)
(let [[a] 1] a)
(let [a 1] a)
(let [x (atom 0)] x)
(list 1 2 3)
(not= 1 2)
(ns bar (:require ["./b/c" :as b]) (:require ["../a/b" :as f])) (defn foo [] (b/mb 1 2) (f/mf 3 4))
(ns bar) (defn foo [a b] (+ a b))
(println 1 (comment 3) 2)
(reduce (fn [a x] a) nil [1 2 3])
(rest [1 2 3])
(run! (fn [x] 1) [2])
(swap! nil (fn [x] x))
(vector 1 2 3)
{:a 1 :b 2}
{:k1 1 :k2 "v2" "k3" :v3}