__FILENAME__
__LINE__
__POSITION__
"he\nwo"
(- 3 2)
(:b {:a 1 :b 2 :c 3})
(* 3 2)
(/ 3 2)
(+ 3 2)
(= 1 2)
(= 2 2)
(count (vector 1 2 3))
(count [1 2 3])
(def a 1) (defn f [] a) (f)
(defn f [_ x _] x) (f 1 2 3)
(defn f [{a :a :as c b :b}] c)
(defn f [a] a) (f 1)
(defn f [node] (let [[tag] node] (if (= 1 (count node)) tag (if (map? (get node 1)) nil (str tag (reduce (fn [a x] (str a (f x))) "" (drop 1 node)) tag))))) (f [:A [:B]])
(do (str 1) (str 2))
(drop 2 [1 2 3 4 5])
(get [10 20] 1)
(if false 1 2)
(if true 1 (FIXME))
(if true 1 2)
(if true 1)
(if-let [_ true] 10 20)
(if-let [a false b true] 10 20)
(if-let [a true b true] 10 20)
(list 1 2)
(map (fn [x] (+ x x)) [1 2 3])
(map? [])
(map? {:foo 1})
(not false)
(not true)
(not= 1 2)
(println 1 (comment 3) 2)
(reduce (fn [acc x] (+ acc x)) 0 (list 1 2 3))
(reduce (fn [acc x] (+ acc x)) 0 (vector 1 2 3))
(reduce (fn [acc x] (+ acc x)) 0 [1 2 3])
(some? (:a {}))
(some? 1)
(some? nil)
(str 1 2)
(vector 1 2)
(vector? [1 2])
(vector? 3)
[1 2]
false
nil
true