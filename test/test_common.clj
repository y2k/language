(defn test []
  (println  "1" "2")
  (eprintln "1" "2")
  (let t1 (println  "1" "2"))
  (let t2 (eprintln "1" "2"))
  (if      (contains? {:a 1 :b 2} :b)                          nil (FIXME __LOC__))
  (if (not (contains? {:a 1 :b 2} :c))                         nil (FIXME __LOC__))
  (if (vector? [1 2])                                          nil (FIXME __LOC__))
  (if (= 2 (second [1 2]))                                     nil (FIXME __LOC__))
  (if (string? "")                                             nil (FIXME __LOC__))
  (if (boolean? false)                                         nil (FIXME __LOC__))
  (if (= 6 (reduce (fn [^int a ^int b] (+ a b)) 0 [1 2 3]))     nil (FIXME __LOC__))
  (if (= (str [1 2]) (str (vec (list 1 2))))                   nil (FIXME __LOC__))
  (if (= 2 (count (rest [1 2 3])))                             nil (FIXME __LOC__))
  (if (string/starts-with? "abc" "ab")                         nil (FIXME __LOC__))
  (if (= "Hello" (subs "Hello world" 0 5))                     nil (FIXME __LOC__))
  (if (= 5 (count "Hello"))                                    nil (FIXME __LOC__))
  (if (= 42 (parse-int "42"))                                  nil (FIXME __LOC__))
  (if (= 3 (last [1 2 3]))                                     nil (FIXME __LOC__))
  (if (= (str ["a" "2" "c"]) (str (string/split "a 2 c" " "))) nil (FIXME __LOC__))
  (if (= "a b" (string/join " " ["a" "b"]))                    nil (FIXME __LOC__))
  0)
