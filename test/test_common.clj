(defn- assert_ [loc expected actual]
  (if (= (str expected) (str actual)) nil (FIXME loc actual)))

(defn test []
  (assert_ __LOC__ "12" (re-find (re-pattern "^\\d+") "12bb"))
  (println  "1" "2")
  (eprintln "1" "2")
  (let t1 (println  "1" "2"))
  (let t2 (eprintln "1" "2"))
  (assert_ __LOC__ true (contains? {:a 1 :b 2} :b))
  (assert_ __LOC__ true (not (contains? {:a 1 :b 2} :c)))
  (assert_ __LOC__ true (vector? [1 2]))
  (assert_ __LOC__ 2 (second [1 2]))
  (assert_ __LOC__ true (string? ""))
  (assert_ __LOC__ true (boolean? false))
  (assert_ __LOC__ 6 (reduce (fn [^int a ^int b] (+ a b)) 0 [1 2 3]))
  (assert_ __LOC__ (str [1 2]) (str (vec (list 1 2))))
  (assert_ __LOC__ 2 (count (rest [1 2 3])))
  (assert_ __LOC__ true (string/starts-with? "abc" "ab"))
  (assert_ __LOC__ "Hello" (subs "Hello world" 0 5))
  (assert_ __LOC__ 5 (count "Hello"))
  (assert_ __LOC__ 42 (parse-int "42"))
  (assert_ __LOC__ 3 (last [1 2 3]))
  (assert_ __LOC__ (str ["a" "2" "c"]) (str (string/split "a 2 c" " ")))
  (assert_ __LOC__ "a b" (string/join " " ["a" "b"]))
  0)
