=============================
"main.clj:1:1"
=============================
(1 - (10 - 20))
=============================
(1 - 2 - 3 - 4)
=============================
{ ..."person", ["city"]: "NY" }
=============================
{ ...alert("person"), ["city"]: "NY" }
=============================
crypto.subtle
=============================
"r".join()
=============================
3 === "https://g.com/a"(1)
=============================
(1 * (2 * 3 * 4))
=============================
(5 / (17 / 3))
=============================
(1 % 2)
=============================
export const foo = (1 + 2);
=============================
(1 + 2)
=============================
(3 <= 1)
(4 >= 2)
=============================
alert(-1)
=============================
alert({["__y2k_type"]: "quote", ["value"]: "a"})
=============================
alert("a\"b")
=============================
alert("foo\"bar")
=============================
alert(fetch(eval()))
=============================
alert(((a, b, c) => {
let p__1;;
if (a) {
p__1 = b;
} else {
p__1 = c;
};
return p__1 }))
=============================
alert(((x) => {
return alert(x) }))
=============================
alert(((x) => {
return x }))
=============================
let p__1;
if (1) {
p__1 = alert(11, fetch(12), 13);
} else {
p__1 = 3;
}
alert(p__1)
=============================
let p__1;
if (1) {
p__1 = alert(2);
} else {
p__1 = alert(3);
}
alert(p__1)
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
alert(p__1)
=============================
alert({["__y2k_type"]: "quote", ["value"]: "a"})
=============================
alert(...[1, 2, 3])
=============================
alert([1, 2, 3])
=============================
alert({["f"]: (() => {
const a = 1;;
return 2 })})
=============================
alert(1, alert(4, alert(7, 8, 9), 6), 3)
=============================
alert(1, alert(4, 5, 6), 3)
=============================
alert(1, ((a) => {
return alert(alert(10), alert(11)) }), 3)
=============================
alert(1, ((a) => {
return a }), 3)
=============================
alert(1, {["a"]: alert(10, 11), ["b"]: 5}, 3)
=============================
alert(1, {["a"]: 4, ["b"]: 5}, 3)
=============================
alert(1, 2, 3)
=============================
alert(1)
alert(3)
=============================
alert(1)
alert(3)
=============================
let p__4;
let p__1;
if (alert(11)) {
p__1 = alert(12);
} else {
p__1 = alert(13);
}
if (p__1) {
let p__2;
if (alert(21)) {
p__2 = alert(22);
} else {
p__2 = alert(23);
}
p__4 = p__2;
} else {
let p__3;
if (alert(31)) {
p__3 = alert(32);
} else {
p__3 = alert(33);
}
p__4 = p__3;
}
alert(4, {["a"]: p__4}, 5)
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
alert(4, {["a"]: p__1}, 5)
=============================
alert(globalThis)
=============================
const p__1 = "a";
let p__10;
if (p__1) {
const p__3 = 1;
let p__7;
if (p__3) {
const p__4 = 2;
let p__6;
if (p__4) {
p__6 = 3;
} else {
p__6 = p__4;
}
p__7 = p__6;
} else {
p__7 = p__3;
}
const p__2 = p__7;
let p__9;
if (p__2) {
const p__5 = "c";
let p__8;
if (p__5) {
p__8 = "d";
} else {
p__8 = p__5;
}
p__9 = p__8;
} else {
p__9 = p__2;
}
p__10 = p__9;
} else {
p__10 = p__1;
}
p__10
=============================
const p__1 = document.foo();
let p__2;
if (p__1) {
p__2 = document.bar();
} else {
p__2 = p__1;
}
p__2
=============================
document.foo()
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__2 = alert(fetch(2));
let p__3;
if (p__2) {
p__3 = alert(3);
} else {
p__3 = p__2;
}
p__4 = p__3;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__2 = alert(2);
let p__3;
if (p__2) {
p__3 = alert(3);
} else {
p__3 = p__2;
}
p__4 = p__3;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__2 = alert(2);
let p__3;
if (p__2) {
p__3 = alert(3);
} else {
p__3 = p__2;
}
p__4 = p__3;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
const p__2 = 2;
let p__3;
if (p__2) {
p__3 = 3;
} else {
p__3 = p__2;
}
p__4 = p__3;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
const p__2 = 2;
let p__3;
if (p__2) {
p__3 = 3;
} else {
p__3 = p__2;
}
p__4 = p__3;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__2;
if (p__1) {
p__2 = 2;
} else {
p__2 = p__1;
}
p__2
=============================
1
=============================
1
=============================
[1]
=============================
const p__1 = 1;
let p__2;
if (p__1 === "a") {
p__2 = alert(2);
} else {
p__2 = alert(3);
}
p__2
=============================
("" + 2)
=============================
[...[1, 2], ...[3, 4]]
=============================
let p__2;
if (1 === 2) {
p__2 = 3;
} else {
let p__1;
if (4 === 5) {
p__1 = 6;
} else {
p__1 = 0;
}
p__2 = p__1;
}
p__2
=============================
let p__3;
if (1 === 2) {
p__3 = 3;
} else {
let p__2;
if (4 === 5) {
p__2 = 6;
} else {
let p__1;
if (7 === 8) {
p__1 = 9;
} else {
p__1 = 0;
}
p__2 = p__1;
}
p__3 = p__2;
}
p__3
=============================
let p__1;
if (("" + "c")) {
p__1 = ("" + "a");
} else {
p__1 = ("" + "b");
}
p__1
=============================
let p__2;
if (1) {
p__2 = 2;
} else {
let p__1;
if (3) {
p__1 = 4;
} else {
p__1 = 5;
}
p__2 = p__1;
}
p__2
=============================
[...[1, 2], 3]
=============================
const LI_SP = 600;
=============================
export const foo = (1 + 2);
=============================
export const foo = [{}];
=============================
export const LI_SP = 600;
=============================
export const state = [{["field"]: 1}];
=============================
const a = "";
typeof a === "String"
=============================
const a = [];
a[7]
=============================
const a = {};
{ ...a, ["city"]: "NY" }
=============================
const a = {};
{ ...a, ["user_id"]: "data.now" }
=============================
const a = {};
a.db[7]=a.now
=============================
const a = {};
a.bar = 1;
=============================
const a = {};
a.splice(0, 1, (((x) => {
return x }))(a[0]))[0]
=============================
const a = 1;
console.info("hello", a, 123)
=============================
const a = 2;
a.bar = 1;
=============================
const c = {};
c["a"]
=============================
const LI_SP = 600;
=============================
const r = {};
r.play
=============================
const r = {};
r.play
=============================
const x = 1;
x[0]
=============================
const x = 1;
x.fill(2)
2
=============================
alert(1)
=============================
export const a = ((b, c, ...d) => {
return console.info(b, c, d) });
=============================
export const a = ((xs) => {
return { ...xs, ["k"]: "v" } });
=============================
export const b = ((x) => {
return x });
export const fetch = ((r, e, c) => {
return b(0) });
=============================
export const bar = ((y) => {
return y.b });
=============================
export const f = ((fx) => {
return fx(2) });
=============================
export const f = ((x, y) => {
return y });
f(1, 2)
=============================
export const f = ((x) => {
return x?.foo?.bar });
=============================
export const f = ((x) => {
return x });
f(1)
=============================
export const fetch = ((request, env, context) => {
return request });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
const x = ("" + "e");;
return x });
=============================
export const foo = ((bar, then) => {
bar(1);
return then(bar(2)) });
=============================
export const foo = ((x) => {
return foo(x) });
=============================
export const foo = ((x) => {
return x });
export const bar = ((y) => {
return foo(y) });
=============================
export const x = (() => {
return console.info() });
=============================
const foo = ((r, e, w) => {
return 0 });
export default {["fetch"]: foo}
=============================
const foo = ((x) => {
return x });
=============================
const foo = ((x) => {
return x });
export default {["fetch"]: foo}
=============================
export default {["fetch"]: "fetch_handler"}
=============================
export default {["fetch"]: ((a) => {
return a })}
=============================
fetch(eval())
=============================
let p__1;
if (alert(1)) {
p__1 = alert(21, alert(22));
} else {
p__1 = alert(3);
}
fetch(p__1)
=============================
fetch(...alert([1, 2, 3]))
=============================
fetch(...[1, 2, 3])
=============================
fetch([1, 2, 3])
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
fetch({["a"]: p__1})
=============================
(function(){throw new Error(("" + "FIXME main.clj:1:1 - "))})()
=============================
((p__1) => {
const p__2 = p__1[0];;
const a = p__2["b"];;
const c = p__2["d"];;
const e = p__1[1];;
return (a + c + e) })
=============================
(() => {
return 2 })
=============================
((p__1, e) => {
const a = p__1["b"];;
const c = p__1["d"];;
return (a + c + e) })
=============================
((p__1) => {
const a = p__1["url"];;
const b = p__1["props"];;
return [a, b] })
=============================
((a, p__1, d) => {
const b = p__1[0];;
const c = p__1[1];;
return a(b, c, d) })
=============================
((a, p__1, c) => {
const b = p__1["b"];;
return a(b, c) })
=============================
((a, b, c) => {
let p__1;;
if (a) {
p__1 = b;
} else {
p__1 = c;
};
return p__1 })
=============================
((a, e) => {
return (a + e) })
=============================
((x) => {
return x })
=============================
new Foo("a", 1)
=============================
new Foo()
=============================
let p__2;
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
if (alert(p__1)) {
p__2 = 4;
} else {
p__2 = 5;
}
p__2
=============================
let p__1;
if (alert(1)) {
p__1 = 2;
} else {
p__1 = 3;
}
p__1
=============================
let p__1;
if (alert(11, fetch(12))) {
p__1 = alert(21, fetch(22));
} else {
p__1 = alert(31, fetch(32));
}
p__1
=============================
let p__3;
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
if (p__1) {
let p__2;
if (21) {
p__2 = 22;
} else {
p__2 = 23;
}
p__3 = p__2;
} else {
p__3 = 4;
}
p__3
=============================
let p__2;
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
if (p__1) {
p__2 = 10;
} else {
p__2 = 20;
}
p__2
=============================
let p__2;
let p__1;
if (11) {
p__1 = 12;
} else {
p__1 = 13;
}
if (p__1) {
p__2 = 2;
} else {
p__2 = 3;
}
p__2
=============================
let p__3;
const p__1 = null === 3;
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = undefined === 3;
}
if (p__2) {
p__3 = 1;
} else {
p__3 = 2;
}
p__3
=============================
let p__3;
const p__1 = 11;
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = 12;
}
if (p__2) {
p__3 = 2;
} else {
p__3 = 4;
}
p__3
=============================
let p__3;
const p__1 = null === 3;
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = undefined === 3;
}
if (!(p__2)) {
p__3 = 1;
} else {
p__3 = 2;
}
p__3
=============================
let p__1;
if (1) {
p__1 = alert(11, fetch(12), 13);
} else {
p__1 = 3;
}
p__1
=============================
let p__1;
if (1) {
p__1 = alert(2);
} else {
p__1 = alert(3);
}
p__1
=============================
let p__1;
if (1) {
p__1 = alert(2);
} else {
p__1 = 3;
}
p__1
=============================
let p__2;
if (1) {
let p__1;
if (21) {
p__1 = 22;
} else {
p__1 = 23;
}
p__2 = p__1;
} else {
p__2 = 3;
}
p__2
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
p__1
=============================
export const a = 1;
export const b = 2;
=============================

=============================
("" + 2)
=============================
const p__1 = "c";
const a = p__1[0];
const b = p__1[1];
a
=============================
(() => {
let p__1;;
if (false) {
p__1 = 1;
} else {
p__1 = 2;
};
return p__1 })
=============================
const a = fetch(alert(1));
a
=============================
const a = fetch(1);
a
=============================
const b = "c";
{[b]: 2}
=============================
const c = 1;
const b = c;
const a = b;
a
=============================
const fx = 1;
fx(2)
=============================
const r = 0;
r.json()
=============================
{ ...{["a"]: 1}, ...{["b"]: 2} }
=============================
const p__1 = null === 3;
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = undefined === 3;
}
p__2
=============================
!((1 + 2))
=============================
!(1)
=============================
!(1 === 2)
=============================

=============================
import * as app from './main.shared.js';
=============================
const p__1 = document.foo();
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = document.bar();
}
p__2
=============================
document.foo()
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__2 = alert(fetch(2));
let p__3;
if (p__2) {
p__3 = p__2;
} else {
p__3 = alert(3);
}
p__4 = p__3;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__2 = alert(2);
let p__3;
if (p__2) {
p__3 = p__2;
} else {
p__3 = alert(3);
}
p__4 = p__3;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__2 = 2;
let p__3;
if (p__2) {
p__3 = p__2;
} else {
p__3 = 3;
}
p__4 = p__3;
}
p__4
=============================
1
=============================
1
=============================
console.info("hello world")
=============================
console.info(((p__1) => {
const a = p__1[0];;
return a }))
=============================
console.info(1, 2, 3)
=============================
console.info()
=============================
{["__y2k_type"]: "quote", ["value"]: "(if* 1 2 3)"}
=============================
new Response("hello_world", 1, false)
=============================
alert(fetch(2)).b = 1;
=============================
alert(2).b = 1;
=============================
window.b = 1;
=============================
alert(2).bar = 1;
=============================
alert(1) = 2;
=============================
window = 1;
=============================
window.b = 1;
=============================
const p__1 = null === 3;
let p__2;
if (p__1) {
p__2 = p__1;
} else {
p__2 = undefined === 3;
}
!(p__2)
=============================
(function(){throw new Error("foo")})()
=============================
typeof 1
=============================
["r".join()]
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
[p__1]
=============================
[("" + "a")]
=============================
[]
=============================
let p__1;
if (4) {
p__1 = 5;
} else {
p__1 = 6;
}
{["a"]: p__1}
=============================
{["a"]: 1}
=============================
{["b"]: "r".join()}
=============================
{["f"]: (() => {
const a = 1;;
return 2 })}
=============================
{["f"]: (() => {
return 2 })}
=============================
{["fetch"]: (() => {
const world = 0;;
return 1 })}
=============================
{["headers"]: {["get"]: (() => {
return "TG_SECRET_TOKEN" })}}
=============================
{["content-type"]: "application/json", ["a"]: [1, [10, 20, 30], 3]}
=============================
let p__1;
if (1) {
p__1 = 2;
} else {
p__1 = 3;
}
let p__2;
if (4) {
p__2 = 5;
} else {
p__2 = 6;
}
{[p__1]: p__2}
=============================
{}