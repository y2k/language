=============================
"main.clj:1:1"
=============================
const p__1 = (10 - 20);
(1 - p__1)
=============================
(1 - 2 - 3 - 4)
=============================
{ ..."person", ["city"]: "NY" }
=============================
const p__1 = alert("person");
{ ...p__1, ["city"]: "NY" }
=============================
crypto.subtle
=============================
"r".join()
=============================
3 === "https://g.com/a"(1)
=============================
const p__1 = (2 * 3 * 4);
(1 * p__1)
=============================
const p__1 = (17 / 3);
(5 / p__1)
=============================
(1 % 2)
=============================
export const foo = (1 + 2);
=============================
(1 + 2)
=============================
(3 <= 1)
(4 >= 2)
=============================
alert({["__y2k_type"]: "quote", ["value"]: "a"})
=============================
alert("a\"b")
=============================
alert("foo\"bar")
=============================
alert({["__y2k_type"]: "quote", ["value"]: "a"})
=============================
const p__1 = [1, 2, 3];
alert(...p__1)
=============================
alert(1)
alert(3)
=============================
alert(1)
alert(3)
=============================
alert(globalThis)
=============================
const p__1 = "a";
let p__7;
if (p__1) {
const p__3 = 1;
let p__9;
if (p__3) {
const p__4 = 2;
let p__11;
if (p__4) {
p__11 = 3;
} else {
p__11 = p__4;
}
p__9 = p__11;
} else {
p__9 = p__3;
}
const p__2 = p__9;
let p__13;
if (p__2) {
const p__5 = "c";
let p__15;
if (p__5) {
p__15 = "d";
} else {
p__15 = p__5;
}
p__13 = p__15;
} else {
p__13 = p__2;
}
p__7 = p__13;
} else {
p__7 = p__1;
}
p__7
=============================
const p__1 = document.foo();
let p__3;
if (p__1) {
p__3 = document.bar();
} else {
p__3 = p__1;
}
p__3
=============================
document.foo()
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__5 = fetch(2);
const p__2 = alert(p__5);
let p__7;
if (p__2) {
p__7 = alert(3);
} else {
p__7 = p__2;
}
p__4 = p__7;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__2 = alert(2);
let p__6;
if (p__2) {
p__6 = alert(3);
} else {
p__6 = p__2;
}
p__4 = p__6;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
const p__2 = alert(2);
let p__6;
if (p__2) {
p__6 = alert(3);
} else {
p__6 = p__2;
}
p__4 = p__6;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
const p__2 = 2;
let p__6;
if (p__2) {
p__6 = 3;
} else {
p__6 = p__2;
}
p__4 = p__6;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
const p__2 = 2;
let p__6;
if (p__2) {
p__6 = 3;
} else {
p__6 = p__2;
}
p__4 = p__6;
} else {
p__4 = p__1;
}
p__4
=============================
const p__1 = 1;
let p__3;
if (p__1) {
p__3 = 2;
} else {
p__3 = p__1;
}
p__3
=============================
1
=============================
1
=============================
[1]
=============================
("" + 2)
=============================
[...[1, 2], ...[3, 4]]
=============================
let p__2;
const p__1 = 1 === 2;
if (p__1) {
p__2 = 3;
} else {
let p__4;
const p__3 = 4 === 5;
if (p__3) {
p__4 = 6;
} else {
p__4 = 0;
}
p__2 = p__4;
}
p__2
=============================
let p__2;
const p__1 = 1 === 2;
if (p__1) {
p__2 = 3;
} else {
let p__4;
const p__3 = 4 === 5;
if (p__3) {
p__4 = 6;
} else {
let p__6;
const p__5 = 7 === 8;
if (p__5) {
p__6 = 9;
} else {
p__6 = 0;
}
p__4 = p__6;
}
p__2 = p__4;
}
p__2
=============================
let p__2;
const p__1 = ("" + "c");
if (p__1) {
p__2 = ("" + "a");
} else {
p__2 = ("" + "b");
}
p__2
=============================
let p__2;
if (1) {
p__2 = 2;
} else {
let p__4;
if (3) {
p__4 = 4;
} else {
p__4 = 5;
}
p__2 = p__4;
}
p__2
=============================
[...[1, 2], 3]
=============================
const LI_SP = 600;
=============================
export const foo = (1 + 2);
=============================
export const foo = [{}];
=============================
export const LI_SP = 600;
=============================
export const state = [{["field"]: 1}];
=============================
const a = "";
const p__1 = typeof a;
p__1 === "String"
=============================
const a = [];
a[7]
=============================
const a = {};
{ ...a, ["city"]: "NY" }
=============================
const a = {};
{ ...a, ["user_id"]: "data.now" }
=============================
const a = {};
a.db[7]=a.now
=============================
const a = {};
a.bar = 1;
=============================
const a = {};
const p__2 = (((x) => {
return x }))(a[0]);
const p__1 = a.splice(0, 1, p__2);
p__1[0]
=============================
const a = 1;
console.info("hello", a, 123)
=============================
const c = {};
c["a"]
=============================
const LI_SP = 600;
=============================
const r = {};
r.play
=============================
const r = {};
r.play
=============================
const x = 1;
x[0]
=============================
const x = 1;
x.fill(2)
2
=============================
alert(1)
=============================
export const a = ((b, c, ...d) => {
return console.info(b, c, d) });
=============================
export const b = ((x) => {
return x });
export const fetch = ((r, e, c) => {
return b(0) });
=============================
export const bar = ((y) => {
return y.b });
=============================
export const f = ((fx) => {
return fx(2) });
=============================
export const f = ((x, y) => {
return y });
f(1, 2)
=============================
export const f = ((x) => {
return x });
f(1)
=============================
export const fetch = ((request, env, context) => {
return request });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
const x = ("" + "e");;
return x });
=============================
export const foo = ((bar, then) => {
bar(1);
const p__1 = bar(2);;
return then(p__1) });
=============================
export const foo = ((x) => {
return foo(x) });
=============================
export const foo = ((x) => {
return x });
export const bar = ((y) => {
return foo(y) });
=============================
export const x = (() => {
return console.info() });
=============================
const foo = ((r, e, w) => {
return 0 });
export default {["fetch"]: foo}
=============================
const foo = ((x) => {
return x });
=============================
const foo = ((x) => {
return x });
export default {["fetch"]: foo}
=============================
export default {["fetch"]: "fetch_handler"}
=============================
export default {["fetch"]: ((a) => {
return a })}
=============================
let p__3;
const p__2 = alert(1);
if (p__2) {
const p__4 = alert(22);
p__3 = alert(21, p__4);
} else {
p__3 = alert(3);
}
const p__1 = p__3;
fetch(p__1)
=============================
const p__1 = alert([1, 2, 3]);
fetch(...p__1)
=============================
const p__1 = [1, 2, 3];
fetch(...p__1)
=============================
fetch([1, 2, 3])
=============================
fetch({["a"]: if (1) {
2
} else {
3
}})
=============================
const p__2 = ("" + "FIXME main.clj:1:1 - ");
const p__1 = new Error(p__2);
(function(){throw p__1})()
=============================
((p__1) => {
const p__2 = p__1[0];;
const a = p__2["b"];;
const c = p__2["d"];;
const e = p__1[1];;
return (a + c + e) })
=============================
((p__1, e) => {
const a = p__1["b"];;
const c = p__1["d"];;
return (a + c + e) })
=============================
((p__1) => {
const a = p__1["url"];;
const b = p__1["props"];;
return [a, b] })
=============================
((a, p__1, d) => {
const b = p__1[0];;
const c = p__1[1];;
return a(b, c, d) })
=============================
((a, p__1, c) => {
const b = p__1["b"];;
return a(b, c) })
=============================
((a, e) => {
return (a + e) })
=============================
const p__2 = eval();
const p__1 = fetch(p__2);
alert(p__1)
=============================
const p__1 = eval();
fetch(p__1)
=============================
new Foo("a", 1)
=============================
new Foo()
=============================
let p__4;
let p__2;
if (1) {
p__2 = 2;
} else {
p__2 = 3;
}
const p__3 = p__2;
if (p__3) {
p__4 = 10;
} else {
p__4 = 20;
}
p__4
=============================
let p__2;
if (1) {
p__2 = 2;
} else {
p__2 = 3;
}
p__2
=============================
export const a = 1;
export const b = 2;
=============================

=============================
("" + 2)
=============================
const p__1 = "c";
const a = p__1[0];
const b = p__1[1];
a
=============================
(() => {
let p__2;;
if (false) {
p__2 = 1;
} else {
p__2 = 2;
};
return p__2 })
=============================
const p__1 = alert(1);
const a = fetch(p__1);
a
=============================
const a = fetch(1);
a
=============================
const b = "c";
{[b]: 2}
=============================
const c = 1;
const b = c;
const a = b;
a
=============================
const fx = 1;
fx(2)
=============================
const r = 0;
r.json()
=============================
{ ...{["a"]: 1}, ...{["b"]: 2} }
=============================
const p__1 = (1 + 2);
!(p__1)
=============================
!(1)
=============================
const p__1 = 1 === 2;
!(p__1)
=============================

=============================
import * as app from './main.shared.js';
=============================
const p__1 = document.foo();
let p__3;
if (p__1) {
p__3 = p__1;
} else {
p__3 = document.bar();
}
p__3
=============================
document.foo()
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__5 = fetch(2);
const p__2 = alert(p__5);
let p__7;
if (p__2) {
p__7 = p__2;
} else {
p__7 = alert(3);
}
p__4 = p__7;
}
p__4
=============================
const p__1 = alert(1);
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__2 = alert(2);
let p__6;
if (p__2) {
p__6 = p__2;
} else {
p__6 = alert(3);
}
p__4 = p__6;
}
p__4
=============================
const p__1 = 1;
let p__4;
if (p__1) {
p__4 = p__1;
} else {
const p__2 = 2;
let p__6;
if (p__2) {
p__6 = p__2;
} else {
p__6 = 3;
}
p__4 = p__6;
}
p__4
=============================
1
=============================
1
=============================
console.info("hello world")
=============================
console.info(((p__1) => {
const a = p__1[0];;
return a }))
=============================
console.info(1, 2, 3)
=============================
console.info()
=============================
new Response("hello_world", 1, false)
=============================
const p__1 = alert(2);
p__1.b = 1;
=============================
const p__1 = fetch(2);
const p__2 = alert(p__1);
p__2.b = 1;
=============================
window.b = 1;
=============================
const p__1 = alert(2);
p__1.bar = 1;
=============================
window = 1;
=============================
window.b = 1;
=============================
const p__1 = new Error("foo");
(function(){throw p__1})()
=============================
typeof 1
=============================
const p__1 = "r".join();
[p__1]
=============================
let p__3;
if (1) {
p__3 = 2;
} else {
p__3 = 3;
}
const p__1 = p__3;
[p__1]
=============================
const p__1 = ("" + "a");
[p__1]
=============================
[]
=============================
let p__3;
if (4) {
p__3 = 5;
} else {
p__3 = 6;
}
const p__1 = p__3;
{["a"]: p__1}
=============================
{["a"]: 1}
=============================
const p__1 = "r".join();
{["b"]: p__1}
=============================
{["fetch"]: (() => {
const world = 0;;
return 1 })}
=============================
{["headers"]: {["get"]: (() => {
return "TG_SECRET_TOKEN" })}}
=============================
{["content-type"]: "application/json", ["a"]: [1, [10, 20, 30], 3]}
=============================
let p__3;
if (1) {
p__3 = 2;
} else {
p__3 = 3;
}
const p__1 = p__3;
let p__6;
if (4) {
p__6 = 5;
} else {
p__6 = 6;
}
const p__4 = p__6;
{[p__1]: p__4}
=============================
{}