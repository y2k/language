=============================
"main.clj:1:1"
=============================
const p__5 = (10 - 20);
(1 - p__5)
=============================
(1 - 2 - 3 - 4)
=============================
{ ..."person", ["city"]: "NY" }
=============================
const p__5 = alert("person");
{ ...p__5, ["city"]: "NY" }
=============================
crypto.subtle
=============================
"r".join()
=============================
3 === "https://g.com/a"(1)
=============================
const p__5 = (2 * 3 * 4);
(1 * p__5)
=============================
const p__5 = (17 / 3);
(5 / p__5)
=============================
(1 % 2)
=============================
export const foo = (1 + 2);
=============================
(1 + 2)
=============================
(3 <= 1)
(4 >= 2)
=============================
const p__5 = {["__y2k_type"]: "quote", ["value"]: "a"};
alert(p__5)
=============================
alert("a\"b")
=============================
alert("foo\"bar")
=============================
const p__5 = {["__y2k_type"]: "quote", ["value"]: "a"};
alert(p__5)
=============================
const p__5 = [1, 2, 3];
alert(...p__5)
=============================
alert(1)
alert(3)
=============================
alert(1)
alert(3)
;;
alert(2)
=============================
alert(globalThis)
=============================
const p__5 = "a";
let p__11;
if (p__5) {
const p__7 = 1;
let p__13;
if (p__7) {
const p__8 = 2;
let p__15;
if (p__8) {
p__15 = 3;
} else {
p__15 = p__8;
}
p__13 = p__15;
} else {
p__13 = p__7;
}
const p__6 = p__13;
let p__17;
if (p__6) {
const p__9 = "c";
let p__19;
if (p__9) {
p__19 = "d";
} else {
p__19 = p__9;
}
p__17 = p__19;
} else {
p__17 = p__6;
}
p__11 = p__17;
} else {
p__11 = p__5;
}
p__11
=============================
const p__5 = document.foo();
let p__7;
if (p__5) {
p__7 = document.bar();
} else {
p__7 = p__5;
}
p__7
=============================
document.foo()
=============================
const p__5 = alert(1);
let p__8;
if (p__5) {
const p__9 = fetch(2);
const p__6 = alert(p__9);
let p__11;
if (p__6) {
p__11 = alert(3);
} else {
p__11 = p__6;
}
p__8 = p__11;
} else {
p__8 = p__5;
}
p__8
=============================
const p__5 = alert(1);
let p__8;
if (p__5) {
const p__6 = alert(2);
let p__10;
if (p__6) {
p__10 = alert(3);
} else {
p__10 = p__6;
}
p__8 = p__10;
} else {
p__8 = p__5;
}
p__8
=============================
const p__5 = alert(1);
let p__8;
if (p__5) {
const p__6 = alert(2);
let p__10;
if (p__6) {
p__10 = alert(3);
} else {
p__10 = p__6;
}
p__8 = p__10;
} else {
p__8 = p__5;
}
p__8
=============================
const p__5 = 1;
let p__8;
if (p__5) {
const p__6 = 2;
let p__10;
if (p__6) {
p__10 = 3;
} else {
p__10 = p__6;
}
p__8 = p__10;
} else {
p__8 = p__5;
}
p__8
=============================
const p__5 = 1;
let p__8;
if (p__5) {
const p__6 = 2;
let p__10;
if (p__6) {
p__10 = 3;
} else {
p__10 = p__6;
}
p__8 = p__10;
} else {
p__8 = p__5;
}
p__8
=============================
const p__5 = 1;
let p__7;
if (p__5) {
p__7 = 2;
} else {
p__7 = p__5;
}
p__7
=============================
1
=============================
1
=============================
[1]
=============================
("" + 2)
=============================
const p__5 = [1, 2];
const p__6 = [3, 4];
[...p__5, ...p__6]
=============================
let p__6;
const p__5 = 1 === 2;
if (p__5) {
p__6 = 3;
} else {
let p__8;
const p__7 = 4 === 5;
if (p__7) {
p__8 = 6;
} else {
p__8 = 0;
}
p__6 = p__8;
}
p__6
=============================
let p__6;
const p__5 = 1 === 2;
if (p__5) {
p__6 = 3;
} else {
let p__8;
const p__7 = 4 === 5;
if (p__7) {
p__8 = 6;
} else {
let p__10;
const p__9 = 7 === 8;
if (p__9) {
p__10 = 9;
} else {
p__10 = 0;
}
p__8 = p__10;
}
p__6 = p__8;
}
p__6
=============================
let p__6;
const p__5 = ("" + "c");
if (p__5) {
p__6 = ("" + "a");
} else {
p__6 = ("" + "b");
}
p__6
=============================
let p__6;
if (1) {
p__6 = 2;
} else {
let p__8;
if (3) {
p__8 = 4;
} else {
p__8 = 5;
}
p__6 = p__8;
}
p__6
=============================
const p__5 = [1, 2];
[...p__5, 3]
=============================
const LI_SP = 600;
=============================
export const foo = (1 + 2);
=============================
export const foo = [{}];
=============================
export const LI_SP = 600;
=============================
const p__5 = {["field"]: 1};
export const state = [p__5];
=============================
const a = "";
const p__5 = typeof a;
p__5 === "String"
=============================
const a = [];
a[7]
=============================
const a = {};
{ ...a, ["city"]: "NY" }
=============================
const a = {};
{ ...a, ["user_id"]: "data.now" }
=============================
const a = {};
a.db[7]=a.now
=============================
const a = {};
a.bar = 1;
=============================
const a = {};
const p__6 = (((x) => {
return x }))(a[0]);
const p__5 = a.splice(0, 1, p__6);
p__5[0]
=============================
const a = 1;
console.info("hello", a, 123)
=============================
const c = {};
c["a"]
=============================
const LI_SP = 600;
=============================
const r = {};
r.play
=============================
const r = {};
r.play
=============================
const x = 1;
x[0]
=============================
const x = 1;
x.fill(2)
2
=============================
alert(1)
=============================
export const a = ((b, c, ...d) => {
return console.info(b, c, d) });
=============================
export const b = ((x) => {
return x });
export const fetch = ((r, e, c) => {
return b(0) });
=============================
export const bar = ((y) => {
return y.b });
=============================
export const f = ((fx) => {
return fx(2) });
=============================
export const f = ((x, y) => {
return y });
f(1, 2)
=============================
export const f = ((x) => {
return x });
f(1)
=============================
export const fetch = ((request, env, context) => {
return request });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
return a });
=============================
export const foo = ((act, webView) => {
return act });
=============================
export const foo = ((a, b) => {
const x = ("" + "e");;
return x });
=============================
export const foo = ((bar, then) => {
bar(1);
const p__5 = bar(2);;
return then(p__5) });
=============================
export const foo = ((x) => {
return foo(x) });
=============================
export const foo = ((x) => {
return x });
export const bar = ((y) => {
return foo(y) });
=============================
export const x = (() => {
return console.info() });
=============================
const foo = ((r, e, w) => {
return 0 });
const p__5 = {["fetch"]: foo};
export default p__5
=============================
const foo = ((x) => {
return x });
=============================
const foo = ((x) => {
return x });
const p__5 = {["fetch"]: foo};
export default p__5
=============================
const p__5 = {["fetch"]: "fetch_handler"};
export default p__5
=============================
const p__5 = {["fetch"]: ((a) => {
return a })};
export default p__5
=============================
let p__7;
const p__6 = alert(1);
if (p__6) {
const p__8 = alert(22);
p__7 = alert(21, p__8);
} else {
p__7 = alert(3);
}
const p__5 = p__7;
fetch(p__5)
=============================
const p__5 = [1, 2, 3];
const p__6 = alert(p__5);
fetch(...p__6)
=============================
const p__5 = [1, 2, 3];
fetch(...p__5)
=============================
const p__5 = [1, 2, 3];
fetch(p__5)
=============================
let p__8;
if (1) {
p__8 = 2;
} else {
p__8 = 3;
}
const p__6 = p__8;
const p__5 = {["a"]: p__6};
fetch(p__5)
=============================
const p__6 = ("" + "FIXME main.clj:1:1 - ");
const p__5 = new Error(p__6);
(function(){throw p__5})()
=============================
((p__5) => {
const p__6 = p__5[0];;
const a = p__6["b"];;
const c = p__6["d"];;
const e = p__5[1];;
return (a + c + e) })
=============================
((p__5, e) => {
const a = p__5["b"];;
const c = p__5["d"];;
return (a + c + e) })
=============================
((p__5) => {
const a = p__5["url"];;
const b = p__5["props"];;
return [a, b] })
=============================
((a, p__5, d) => {
const b = p__5[0];;
const c = p__5[1];;
return a(b, c, d) })
=============================
((a, p__5, c) => {
const b = p__5["b"];;
return a(b, c) })
=============================
((a, e) => {
return (a + e) })
=============================
const p__6 = oof();
const p__5 = bar(p__6);
foo(p__5)
=============================
const p__5 = bar();
foo(p__5)
=============================
new Foo("a", 1)
=============================
new Foo()
=============================
let p__8;
let p__6;
if (1) {
p__6 = 2;
} else {
p__6 = 3;
}
const p__7 = p__6;
if (p__7) {
p__8 = 10;
} else {
p__8 = 20;
}
p__8
=============================
let p__6;
if (1) {
p__6 = 2;
} else {
p__6 = 3;
}
p__6
=============================
export const a = 1;
export const b = 2;
=============================

=============================
("" + 2)
=============================
const p__5 = "c";
const a = p__5[0];
const b = p__5[1];
a
=============================
(() => {
let p__6;;
if (false) {
p__6 = 1;
} else {
p__6 = 2;
};
return p__6 })
=============================
const p__5 = alert(1);
const a = fetch(p__5);
a
=============================
const a = fetch(1);
a
=============================
const b = "c";
{[b]: 2}
=============================
const c = 1;
const b = c;
const a = b;
a
=============================
const fx = 1;
fx(2)
=============================
const r = 0;
r.json()
=============================
const p__5 = (1 + 2);
!(p__5)
=============================
!(1)
=============================
const p__5 = 1 === 2;
!(p__5)
=============================

=============================
import * as app from './main.shared.js';
=============================
const p__5 = document.foo();
let p__7;
if (p__5) {
p__7 = p__5;
} else {
p__7 = document.bar();
}
p__7
=============================
document.foo()
=============================
const p__5 = alert(1);
let p__8;
if (p__5) {
p__8 = p__5;
} else {
const p__9 = fetch(2);
const p__6 = alert(p__9);
let p__11;
if (p__6) {
p__11 = p__6;
} else {
p__11 = alert(3);
}
p__8 = p__11;
}
p__8
=============================
const p__5 = alert(1);
let p__8;
if (p__5) {
p__8 = p__5;
} else {
const p__6 = alert(2);
let p__10;
if (p__6) {
p__10 = p__6;
} else {
p__10 = alert(3);
}
p__8 = p__10;
}
p__8
=============================
const p__5 = 1;
let p__8;
if (p__5) {
p__8 = p__5;
} else {
const p__6 = 2;
let p__10;
if (p__6) {
p__10 = p__6;
} else {
p__10 = 3;
}
p__8 = p__10;
}
p__8
=============================
1
=============================
1
=============================
console.info("hello world")
=============================
console.info(((p__5) => {
const a = p__5[0];;
return a }))
=============================
console.info(1, 2, 3)
=============================
console.info()
=============================
new Response("hello_world", 1, false)
=============================
const p__5 = alert(2);
p__5.b = 1;
=============================
const p__5 = bar(2);
const p__6 = foo(p__5);
p__6.b = 1;
=============================
a.b = 1;
=============================
const p__5 = alert(2);
p__5.bar = 1;
=============================
a = 1;
=============================
a.b = 1;
=============================
const p__5 = new Error("foo");
(function(){throw p__5})()
=============================
typeof 1
=============================
const p__5 = "r".join();
[p__5]
=============================
let p__7;
if (1) {
p__7 = 2;
} else {
p__7 = 3;
}
const p__5 = p__7;
[p__5]
=============================
const p__5 = ("" + "a");
[p__5]
=============================
[]
=============================
let p__7;
if (4) {
p__7 = 5;
} else {
p__7 = 6;
}
const p__5 = p__7;
{["a"]: p__5}
=============================
{["a"]: 1}
=============================
const p__5 = "r".join();
{["b"]: p__5}
=============================
{["fetch"]: (() => {
const world = 0;;
return 1 })}
=============================
const p__5 = {["get"]: (() => {
return "TG_SECRET_TOKEN" })};
{["headers"]: p__5}
=============================
const p__6 = [10, 20, 30];
const p__5 = [1, p__6, 3];
{["content-type"]: "application/json", ["a"]: p__5}
=============================
let p__7;
if (1) {
p__7 = 2;
} else {
p__7 = 3;
}
const p__5 = p__7;
let p__10;
if (4) {
p__10 = 5;
} else {
p__10 = 6;
}
const p__8 = p__10;
{[p__5]: p__8}
=============================
{}