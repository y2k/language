__POS__
(- 1 (- 10 20))
(- 1 2 3 4)
(-> :person (assoc :city "NY"))
(-> (alert :person) (assoc :city "NY"))
(.-subtle crypto)
(.join :r)
((= 3 "https://g.com/a") 1)
(* 1 (* 2 3 4))
(/ 5 (/ 17 3))
(% 1 2)
(^export def foo (+ 1 2))
(+ 1 2)
(<= 3 1)(>= 4 2)
(alert 'a)
(alert "a\"b")
(alert "foo\"bar")
(alert (quote a))
(alert (spread [1 2 3]))
(alert 1) (alert 3)
(alert 1) (alert 3) ;;(alert 2)
(alert globalThis)
(and :a (and 1 2 3) :c :d)
(and (.foo document) (.bar document))
(and (.foo document))
(and (alert 1) (alert (fetch 2)) (alert 3))
(and (alert 1) (alert 2) (alert 3))
(and (alert 1) (alert 2) (alert 3))
(and 1 2 3)
(and 1 2 3)
(and 1 2)
(and 1)
(and 1)
(atom 1)
(comment (foo 1))(str 2)
(concat [1 2] [3 4])
(cond (= 1 2) 3 (= 4 5) 6 :else 0)
(cond (= 1 2) 3 (= 4 5) 6 (= 7 8) 9 :else 0)
(cond (str "c") (str "a") :else (str "b"))
(cond 1 2 3 4 :else 5)
(conj [1 2] 3)
(def ^:private LI_SP 600)
(def foo (+ 1 2))
(def foo (atom {}))
(def LI_SP 600)
(def- a "")(= (type a) "String")
(def- a [])(get a 7)
(def- a {})(assoc a :city "NY")
(def- a {})(assoc a :user_id :data.now)
(def- a {})(assoc! a.db 7 a.now)
(def- a {})(set! a.bar 1)
(def- a {})(swap! a (fn [x] x))
(def- a 1)(println "hello" a 123)
(def- c {})(:a c)
(def- LI_SP 600)
(def- r {})(. r -play)
(def- r {})(.-play r)
(def- x 1)(deref x)
(def- x 1)(reset! x 2)
(defmacro foo [a b] (list a 1)) (foo alert d)
(defn a [b c & d] (println b c d))
(defn b [x] x) (defn fetch [r e c] (-> 0 b))
(defn bar [y] y.b)
(defn f [fx] (fx 2))
(defn f [x y] y)(f 1 2)
(defn f [x] x)(f 1)
(defn fetch [^java.lang.Integer request ^kotlin.List env context] request)
(defn foo [ ^"(App)->aaa.Bbb" a ^"(Baz)->foo.Bar" b] a)
(defn foo [ ^an.app.Ac act ^an.we.WeVi webView] act)
(defn foo [^"(App)->aaa.Bbb" a ^"(Baz)->foo.Bar" b] a)
(defn foo [^an.app.Ac act ^an.we.WeVi webView] act)
(defn foo [a b] (let [x (str :e)] x))
(defn foo [bar then] (bar 1) (then (bar 2)))
(defn foo [x] (foo x))
(defn foo [x] x)(defn bar [y] (foo y))
(defn x [] (println))
(defn- foo [r e w] 0)(export-default {:fetch foo})
(defn- foo [x] x)
(defn- foo[x]x)(export-default {:fetch foo})
(export-default {:fetch :fetch_handler})
(export-default {:fetch (fn [a] a)})
(fetch (if (alert 1) (alert 21 (alert 22)) (alert 3)))
(fetch (spread (alert [1 2 3])))
(fetch (spread [1 2 3]))
(fetch [1 2 3])
(fetch {:a (if 1 2 3)})
(FIXME)
(fn [[{a :b c :d} e]] (+ a c e))
(fn [{a :b c :d} e] (+ a c e))
(fn [{a :url b :props}] [a b])
(fn [a [b c] d] (a b c d))
(fn [a {b :b} c] (a b c))
(fn [a e] (+ a e))
(foo (bar (oof)))
(foo (bar))
(Foo. :a 1)
(Foo.)
(if (if 1 2 3) 10 20)
(if 1 2 3)
(js! (def a 1) (def b 2))
(jvm! (def a 1) (def b 2))
(jvm! (foo 1))(str 2)
(let [[a b] :c] a)
(let [] (fn [] (if false 1 2)))
(let [a (fetch (alert 1))] a)
(let [a (fetch 1)] a)
(let [b "c"] {b 2})
(let [c 1 b c a b] a)
(let [fx 1] (fx 2))
(let [r 0] (.json r))
(not (+ 1 2))
(not 1)
(not= 1 2)
(ns html)
(ns resources (:require [main.shared :as app]))
(or (.foo document) (.bar document))
(or (.foo document))
(or (alert 1) (alert (fetch 2)) (alert 3))
(or (alert 1) (alert 2) (alert 3))
(or 1 2 3)
(or 1)
(or 1)
(println "hello world")
(println (fn [[a]] a))
(println 1 2 3)
(println)
(Response. "hello_world" 1 false)
(set! (.-b (alert 2)) 1)
(set! (.-b (foo (bar 2))) 1)
(set! (.-b a) 1)
(set! (.-bar (alert 2)) 1)
(set! a 1)
(set! a.b 1)
(throw (Error. "foo"))
(type 1)
[(.join :r)]
[(if 1 2 3)]
[(str "a")]
[]
{:a (if 4 5 6)}
{:a 1}
{:b (.join :r)}
{:fetch (fn [] (let [world 0] 1))}
{:headers {:get (fn [] "TG_SECRET_TOKEN")}}
{"content-type" "application/json" :a [1 [10 20 30] 3]}
{(if 1 2 3) (if 4 5 6)}
{}